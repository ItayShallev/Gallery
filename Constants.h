#pragma once
#include <string>
#include <vector>
#include <map>

const std::string DB_FILE_NAME = "Gallery.sqlite";

enum CommandType
{
	HELP = 0,
	// Album operations
	CREATE_ALBUM = 1,
	OPEN_ALBUM,
	CLOSE_ALBUM,
	DELETE_ALBUM,
	LIST_ALBUMS,
	LIST_ALBUMS_OF_USER,

	// Picture operations
	ADD_PICTURE,
	REMOVE_PICTURE,
	SHOW_PICTURE,
	LIST_PICTURES,
	TAG_USER,
	UNTAG_USER,
	LIST_TAGS,

	// User operations
	ADD_USER,
	REMOVE_USER,
	LIST_OF_USER,
	USER_STATISTICS,
	

	TOP_TAGGED_USER,
	TOP_TAGGED_PICTURE,
	PICTURES_TAGGED_USER,

	EXIT = 99
};

struct CommandPrompt {
	CommandType type;
	const std::string prompt;
};

struct CommandGroup {
	const std::string title;
	const std::vector<struct CommandPrompt> commands;
};

typedef std::map<std::string, std::string> Record;

#define DATABASE_EXISTS 0


#define USERS_TABLE_SQL_STATEMENT R"(CREATE TABLE USERS(ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
NAME TEXT NOT NULL);)"

#define ALBUMS_TABLE_SQL_STATEMENT R"(CREATE TABLE ALBUMS(ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 
NAME TEXT NOT NULL,
CREATION_DATE DATE NOT NULL,
USER_ID INTEGER NOT NULL,
FOREIGN KEY (USER_ID) REFERENCES USERS(ID));)"

#define PICTURES_TABLE_SQL_STATEMENT R"(CREATE TABLE PICTURES(ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
NAME TEXT NOT NULL,
LOCATION TEXT NOT NULL,
CREATION_DATE DATE NOT NULL,
ALBUM_ID INTEGER NOT NULL,
FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS(ID));)"

#define TAGS_TABLE_SQL_STATEMENT R"(CREATE TABLE TAGS(ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
PICTURE_ID INTEGER NOT NULL,
USER_ID INTEGER NOT NULL,
FOREIGN KEY (PICTURE_ID) REFERENCES PICTURES(ID),
FOREIGN KEY (USER_ID) REFERENCES USERS(ID));)"
